# -*- coding: utf-8 -*-
"""Customer_Segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CLKahszZgE9bnUic1Y5CtTsTVcV-CV-I

# **Customer Segmentation using KMeans Clustering**

Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Loading Dataset"""

customer_data = pd.read_csv('Mall_Customers.csv')

"""###Data Analysis"""

customer_data.head()

customer_data.shape

customer_data.describe()

customer_data.isnull().sum()

customer_data.info()

customer_data.dtypes

"""Removing the invalid columns from the dataset"""

customer_data.drop(['CustomerID'] , axis = 1, inplace = True)

customer_data.head()

"""###Data Visualization

Distribution Plots to check the variation in data
"""

plt.figure(1 ,figsize = (25,6))
n = 0
for col in ['Age' , 'Annual Income (k$)', 'Spending Score (1-100)']:
  n += 1
  plt.subplot(1, 3, n)
  plt.subplots_adjust(hspace= 0.5, wspace= 0.5)
  sns.distplot(customer_data[col], bins = 20)
  plt.title(f'Distplot of {col}')
plt.show()

for col in ['Age' , 'Annual Income (k$)', 'Spending Score (1-100)']:
  sns.displot(customer_data[col] , kde = True)

sns.displot(data = customer_data, kind = 'kde')

"""Count Plot to check male and female count"""

plt.figure(figsize = (20,4))
sns.countplot(data = customer_data , y = 'Gender')

"""Violin Plot to check the distribution of gender in various attributes"""

plt.figure(figsize = (22,6))
n = 0
for cols in customer_data.iloc[:,1:4]:
  n += 1
  plt.subplot(1 ,3 ,n)
  plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
  sns.violinplot(data = customer_data , x = cols , y = 'Gender')
  plt.title('Violin Plot')

"""Splitting Age into groups:"""

age_18_25 = customer_data.Age[(customer_data['Age'] >= 18) & (customer_data['Age'] <= 25)]
age_26_35 = customer_data.Age[(customer_data['Age'] >= 26) & (customer_data['Age'] <= 35)]
age_36_45 = customer_data.Age[(customer_data['Age'] >= 36) & (customer_data['Age'] <= 45)]
age_46_55 = customer_data.Age[(customer_data['Age'] >= 46) & (customer_data['Age'] <= 55)]
age_55above = customer_data.Age[(customer_data['Age'] > 56)]

"""Bar Plot to see the age divisions"""

age_x = ['age_18_25', 'age_26_35', 'age_36_45', 'age_46_55', 'age_55above']
age_y = [len(age_18_25),len(age_26_35),len(age_36_45),len(age_46_55),len(age_55above)]

plt.figure(figsize = (20,8))
sns.set_palette('muted')
sns.barplot(x = age_x , y = age_y)
plt.xlabel("Age Range")
plt.ylabel("Person Count")

"""Scatter Plot to determine relation between Spending Score and Annual Income"""

sns.relplot(data = customer_data , x = customer_data["Spending Score (1-100)"], y = customer_data["Annual Income (k$)"])

customer_data.describe()

"""Splitting Spending Score into groups"""

ss_1_20 = customer_data["Spending Score (1-100)"][(customer_data["Spending Score (1-100)"] >= 1) & (customer_data["Spending Score (1-100)"] <= 20)]
ss_21_40 = customer_data["Spending Score (1-100)"][(customer_data["Spending Score (1-100)"] >= 21) & (customer_data["Spending Score (1-100)"] <= 40)]
ss_41_60 = customer_data["Spending Score (1-100)"][(customer_data["Spending Score (1-100)"] >= 41) & (customer_data["Spending Score (1-100)"] <= 60)]
ss_61_80 = customer_data["Spending Score (1-100)"][(customer_data["Spending Score (1-100)"] >= 61) & (customer_data["Spending Score (1-100)"] <= 80)]
ss_81_99 = customer_data["Spending Score (1-100)"][(customer_data["Spending Score (1-100)"] >= 81) & (customer_data["Spending Score (1-100)"] <= 99)]

"""Bar Plot to see the Spending Score divisions"""

ss_x = ['ss_1_20', 'ss_21_40', 'ss_41_60', 'ss_61_80', 'ss_81_99']
ss_y = [len(ss_1_20),len(ss_21_40),len(ss_41_60),len(ss_61_80),len(ss_81_99),]

plt.figure(figsize = (20,8))
sns.set_palette('muted')
sns.barplot(x = ss_x , y = ss_y)
plt.xlabel('Spending Score')
plt.ylabel('Person Count')

"""Splitting Annual income into groups"""

ai_15_40 = customer_data['Annual Income (k$)'][(customer_data['Annual Income (k$)'] >= 15) & (customer_data['Annual Income (k$)'] < 40)]
ai_40_65 = customer_data['Annual Income (k$)'][(customer_data['Annual Income (k$)'] >= 40) & (customer_data['Annual Income (k$)'] < 65)]
ai_65_90 = customer_data['Annual Income (k$)'][(customer_data['Annual Income (k$)'] >= 65) & (customer_data['Annual Income (k$)'] < 90)]
ai_90_115 = customer_data['Annual Income (k$)'][(customer_data['Annual Income (k$)'] >= 90) & (customer_data['Annual Income (k$)'] < 115)]
ai_115_137 = customer_data['Annual Income (k$)'][(customer_data['Annual Income (k$)'] >= 115) & (customer_data['Annual Income (k$)'] <= 137)]

"""Bar Plot todetermine the Annual Income divisions"""

ai_x = ['ai_15_40', 'ai_40_65', 'ai_65_90', 'ai_90_115', 'ai_115_137']
ai_y = [len(ai_15_40),len(ai_40_65),len(ai_65_90),len(ai_90_115),len(ai_115_137)]

plt.figure(figsize = (20,8))
sns.set_palette('muted')
sns.barplot(x = ai_x , y = ai_y)
plt.xlabel('Annual Incomes')
plt.ylabel('Person Count')

"""### Clustering between Annual Income and Spending Score

Retrieving Annual Income and Spending score from the dataset
"""

X1 = customer_data.loc[:, ['Annual Income (k$)', 'Spending Score (1-100)']].values

"""Elbow Plot to determine the optimum number of clusters"""

wcss = []
for i in range(1,11):
  kmeans = KMeans(n_clusters = i, init = "k-means++", random_state = 42)
  kmeans.fit(X1)
  wcss.append(kmeans.inertia_)

plt.figure(figsize = (20,8))
plt.plot(range(1,11), wcss, linewidth = '2', marker = '8' , color = 'green')
plt.xlabel('Clusters')
plt.ylabel('WCSS')

"""Number of Clusters = 5

Applying the K-Means Clustering technique on the dataset X1
"""

kmeans = KMeans(n_clusters = 5 , init = "k-means++", random_state = 42)
clusters = kmeans.fit_predict(X1)
centroids = kmeans.cluster_centers_

"""Plotting a Scatter Plot to visualize the clusters"""

plt.figure(figsize = (14,8))
plt.grid()
plt.scatter(X1[:,0], X1[:,1] , c = kmeans.labels_ , cmap = 'plasma' , marker = 'h', s = 100 , linewidth = 1, edgecolor = 'turquoise')
plt.scatter(centroids[:,0], centroids[:,1], c = "black" , s = 125)
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')

"""###Clustering between Age and Spending Score

Retrieving the columns Age and Spending Score from the dataset
"""

X2 = customer_data.loc[:, ['Age', 'Spending Score (1-100)']].values

"""Elbow Plot to determine the optimum number of clusters """

wcss = []
for i in range (1,11):
  kmeans = KMeans(n_clusters = i, init = "k-means++", random_state = 42)
  kmeans.fit(X2)
  wcss.append(kmeans.inertia_)

plt.figure(figsize = (20,8))
plt.plot(range(1,11), wcss , linewidth = 2 , marker = '8', c = 'red')
plt.xlabel('Clusters')
plt.ylabel('WCSS')

"""Number of Clusters = 4

Applying the K-Means Clustering technique on the dataset X2
"""

kmeans = KMeans(n_clusters = 4 , init = "k-means++" , random_state = 1)
clusters = kmeans.fit_predict(X2)
centroids = kmeans.cluster_centers_

"""Scatter plot to visualize the clusters"""

plt.figure(figsize = (15,8))
plt.scatter(X2[:,0], X2[:,1] , c = kmeans.labels_ , cmap = 'rainbow' , marker = '8', edgecolor = 'red' , s = 100)
plt.scatter(centroids[:,0] , centroids[0:,1] , c = 'green' , s = 150 , edgecolor = 'orange')
plt.xlabel('Age')
plt.ylabel('Spending Score')